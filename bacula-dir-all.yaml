apiVersion: v1
kind: PersistentVolume
metadata:
  name: bacula-dir-config-pv
  namespace: bacula
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: hostpath
  claimRef:
    name: bacula-dir-config-pvc
    namespace: bacula
  hostPath:
    path: /data/bacula/config
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: bacula-dir-config-pvc
  namespace: bacula
spec:
  storageClassName: hostpath
  resources:
    requests:
      storage: 1Gi
  accessModes: 
    - ReadWriteMany
---
apiVersion: v1
data:
  bacula-dir.conf: |
    Director {                            # define myself
      Name = bacula-dir
      DIRport = 9101                # where we listen for UA connections
      QueryFile = "/etc/bacula/scripts/query.sql"
      WorkingDirectory = "/opt/bacula/working"
      PidDirectory = "/run/bacula"
      Maximum Concurrent Jobs = 20
      Password = "vGSx8xNeZhNTNzlj1k5N1NqGN+z8UZfPx5tlXKTgrkBb"         # Console password
      Messages = Daemon
    }

    JobDefs {
      Name = "DefaultJob"
      Type = Backup
      Level = Incremental
      Client = bacula-fd
      FileSet = "Full Set"
      Schedule = "WeeklyCycle"
      Storage = File
      Messages = Standard
      Pool = File
      SpoolAttributes = yes
      Priority = 10
      Write Bootstrap = "/opt/bacula/working/%c.bsr"
    }

    Job {
      Name = "BackupClient1"
      JobDefs = "DefaultJob"
    }

    Job {
      Name = "BackupCatalog"
      JobDefs = "DefaultJob"
      Level = Full
      FileSet="Catalog"
      Schedule = "WeeklyCycleAfterBackup"
      RunBeforeJob = "/etc/bacula/scripts/make_catalog_backup MyCatalog"
      RunAfterJob  = "/etc/bacula/scripts/delete_catalog_backup"
      Write Bootstrap = "/opt/bacula/working/%n.bsr"
      Priority = 11                   # run after main backup
    }

    Job {
      Name = "RestoreFiles"
      Type = Restore
      Client=bacula-fd
      Storage = File
      FileSet="Full Set"
      Pool = File
      Messages = Standard
      Where = /var/lib/bacula/archive/bacula-restores
    }


    FileSet {
      Name = "Full Set"
      Include {
        Options {
          signature = MD5
        }
        File = /etc
      }

      Exclude {
        File = /var/lib/bacula
        File = /var/lib/bacula/archive
        File = /proc
        File = /tmp
        File = /sys
        File = /.journal
        File = /.fsck
      }
    }

    Schedule {
      Name = "WeeklyCycle"
      Run = Full 1st sun at 23:05
      Run = Differential 2nd-5th sun at 23:05
      Run = Incremental mon-sat at 23:05
    }

    # This schedule does the catalog. It starts after the WeeklyCycle
    Schedule {
      Name = "WeeklyCycleAfterBackup"
      Run = Full sun-sat at 23:10
    }

    # This is the backup of the catalog
    FileSet {
      Name = "Catalog"
      Include {
        Options {
          signature = MD5
        }
        File = "/var/lib/bacula/bacula.sql"
      }
    }

    # Client (File Services) to backup
    Client {
      Name = bacula-fd
      Address = bacula-fd 
      FDPort = 9102
      Catalog = MyCatalog
      Password = "9QOnLT1iA0C6fqqV+KsanoXyU1hfWLVTAUe4Rp2c6zaN"          # password for FileDaemon
      File Retention = 60 days            # 60 days
      Job Retention = 6 months            # six months
      AutoPrune = yes                     # Prune expired Jobs/Files
    }

    Storage {
      Name = File
    # Do not use "localhost" here    
      Address = bacula-sd                # N.B. Use a fully qualified name here
      SDPort = 9103
      Password = "bXDF7BJ1/li/luKez2wR7QqCINXN1J2rGIVYnlt22fWn"
      Device = FileStorage
      Media Type = File
    }

    Catalog {
      Name = MyCatalog
      dbname = "bacula"; dbuser = "bacula"; dbpassword = "password@2";
      dbaddress = "bacula-postgres"; dbport = "5432"
    }

    Messages {
      Name = Standard
      mailcommand = "/usr/sbin/bsmtp -h localhost -f \"\(Bacula\) \<%r\>\" -s \"Bacula: %t %e of %c %l\" %r"
      operatorcommand = "/usr/sbin/bsmtp -h localhost -f \"\(Bacula\) \<%r\>\" -s \"Bacula: Intervention needed for %j\" %r"
      mail = root@localhost = all, !skipped
      operator = root@localhost = mount
      console = all, !skipped, !saved
      append = "/var/log/bacula/bacula.log" = all, !skipped
      catalog = all
    }
    #
    # Message delivery for daemon messages (no job).
    Messages {
      Name = Daemon
      mailcommand = "/usr/sbin/bsmtp -h localhost -f \"\(Bacula\) \<%r\>\" -s \"Bacula daemon message\" %r"
      mail = root@localhost = all, !skipped
      console = all, !skipped, !saved
      append = "/var/log/bacula/bacula.log" = all, !skipped
    }
    # Default pool definition
    Pool {
      Name = Default
      Pool Type = Backup
      Recycle = yes                       # Bacula can automatically recycle Volumes
      AutoPrune = yes                     # Prune expired volumes
      Volume Retention = 365 days         # one year
      Maximum Volume Bytes = 50G          # Limit Volume size to something reasonable
      Maximum Volumes = 100               # Limit number of Volumes in Pool
    }
    # File Pool definition
    Pool {
      Name = File
      Pool Type = Backup
      Recycle = yes                       # Bacula can automatically recycle Volumes
      AutoPrune = yes                     # Prune expired volumes
      Volume Retention = 365 days         # one year
      Maximum Volume Bytes = 50G          # Limit Volume size to something reasonable
      Maximum Volumes = 100               # Limit number of Volumes in Pool
      Label Format = "Vol-"               # Auto label
    }


    # Scratch pool definition
    Pool {
      Name = Scratch
      Pool Type = Backup
    }

    #
    # Restricted console used by tray-monitor to get the status of the director
    #
    Console {
      Name = build-edge-aarch64-mon
      Password = "bOAIVitDnvUMRbCH4mhQfRUPAAkmtkXQkkiwXV100mK1"
      CommandACL = status, .status
    }

    @|"find /usr/local/etc/conf.d -name '*.conf' -type f -exec echo @{} \;"

kind: ConfigMap
metadata:
  creationTimestamp: null
  name: bacula-dir-config
  namespace: bacula
---
apiVersion: v1
data:
  bconsole.conf: |
    Director {
      Name = bacula-dir
      DIRport = 9101
      address = localhost
      Password = "vGSx8xNeZhNTNzlj1k5N1NqGN+z8UZfPx5tlXKTgrkBb"         # Console password
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: bacula-bconsole-config
  namespace: bacula
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: bacula-dir
  name: bacula-dir
  namespace: bacula
spec:
  replicas: 1
  selector:
    matchLabels:
      app: bacula-dir
  template:
    metadata:
      labels:
        app: bacula-dir
    spec:
      containers:
      - image: localhost:32000/bacula:15.0.2
        name: bacula
        imagePullPolicy: Always
        volumeMounts:
        - name: bacula-dir-conf
          mountPath: /usr/local/etc/bacula-dir.conf
          subPath: bacula-dir.conf
        - name: bacula-bconsole-config
          mountPath: /usr/local/etc/bconsole.conf
          subPath: bconsole.conf
        - name: bacula-dir-config
          mountPath: /usr/local/etc/conf.d
        command: ["/usr/local/sbin/bacula-dir", "-d", "100", "-f"]
      volumes:
        - name: bacula-dir-conf
          configMap:
            name: bacula-dir-config
        - name: bacula-bconsole-config
          configMap:
            name: bacula-bconsole-config
        - name: bacula-dir-config
          persistentVolumeClaim:
            claimName: bacula-dir-config-pvc
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: bacula-dir
  name: bacula-dir
  namespace: bacula
spec:
  ports:
  - port: 9101
    protocol: TCP
    targetPort: 9101
  selector:
    app: bacula-dir
  type: ClusterIP
